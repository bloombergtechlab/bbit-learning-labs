{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tech Lab: Fullstack Web Application Project In this tech lab, students will gain hands-on experience in building a fullstack web application using React, Flask, Redis, and Docker. This project is designed to provide a comprehensive understanding of modern web development practices and technologies. This tech lab is inspired by the real-world applications and technologies used at Bloomberg LP. By participating in this project, students will gain valuable skills that are highly relevant in the industry, preparing them for future opportunities in tech companies like Bloomberg. Project Overview Students will work on creating a web application that involves both frontend and backend development. The frontend will be built using React, while the backend will be implemented using Flask. Redis will be used for data storage, and Docker will be utilized to containerize the application for easy deployment. Technologies Used React : A JavaScript library for building user interfaces. Flask : A lightweight WSGI web application framework in Python. Redis : An in-memory data structure store, used as a data store. Docker : A platform for developing, shipping, and running applications in standardized containers. Learning Objectives By participating in this tech lab, students will: Frontend Development : Learn how to create dynamic and responsive user interfaces using React. Backend Development : Implement RESTful APIs using Flask to handle data retrieval and manipulation. Data Caching : Understand the importance of caching and how to use Redis to improve application performance. Containerization : Gain experience in containerizing applications using Docker for consistent and scalable deployment. Project Tasks Backend (Flask) Develop APIs to handle data requests and responses. Integrate Redis for storing data to improve performance. Frontend (NextJS/React) Create a user interface to display data retrieved from the backend. Implement forms and components to interact with the backend APIs. Getting Started Prerequisites Make sure the following technologies are downloaded prior to starting: Docker Git VS Code VS Code Dev Containers extension To get started with the project, follow these steps: Fork and Clone the Project Repository Fork the project repository Clone the forked repo into your working directory, and navigate to it: git clone https://github.com/YOUR-USERNAME/bbit-learning-labs.git cd bbit-learning-labs/Tech-Lab-On-Campus/NewsFeed Open the Development Container Open VSCode Install the Dev Containers extension here . If you already have it installed, continue to the next step. Open up the Command Palette in VSCode by either Ctrl+Shift+P (Windows) or Cmd+Shift+P (Mac) and type Dev Containers . VS Code may also show a pop up requesting to repoen in container, you can also click this. Click on Dev Containers: Reopen in Container VSCode will start downloading some docker images and install the necessary python and npm packages Run the Website All of the make commands should be run from the Newfeed folder (using the cd bbit-learning-labs/Tech-Lab-On-Campus/NewsFeed command from above should have placed you in the right folder). You can also simplify your workspace by simply opening the Newsfeed folder in VS Code. To check that you are in the right folder on your computer terminal: Run pwd Verify that is says /local/path/to/bbit-learning-labs/Tech-Lab-On-Campus/NewsFeed , where \"/local/path/to\" is your local computers path to the bbit-learning-labs folder you cloned. An example of this would be: \"/user/USERNAME/Downloads\", but this will vary from person to person. To get the web app up and running: Open up a new VS Code terminal window , you can use Ctrl + Shift + ` In the terminal, run make run-backend to run the backend Open up another new terminal window, you can use Ctrl + Shift + ` again In the terminal, run make run-frontend to run the frontend \u2728 You should now be ready to develop! \u2728 Developing Backend Tasks Frontend Tasks Troubleshooting Issues with Docker If you are encountering issues with docker, you can use Github codespaces instead: Fork the repo Navigate to the forked repo Click on the green < > Code button Select the Codespaces tab and click on the + button In codespaces, open a new terminal and run cd Tech-Lab-On-Campus/NewsFeed/ run make install run make redis-in-docker run make run-backend Open up a new terminal and run make run-frontend A pop up should appear saying that port 3000 is in use. Click on Open in Browser . If not, the link can be opened from the terminal window Starting Frontend Clicking on http://localhost:3000 in the terminal opens to a blank page in the browser? Make sure you have done make run from the NewsFeed folder (where the Makefile is) It will probably have opened to 0.0.0.0:3000, just rewrite the url to localhost:3000 in the browser and it should load. npm packages are not loading If you are a bloomberg engineer, try turning off bbpvn while dev container sets up Otherwise, try running make clean or deleting any package.json or node_module directories and running: npm install from within the ./frontend folder. (Can reach via cd frontend ) If this does not work, try to open in codespaces, see issues with docker section above. Resources Resources We hope you enjoy this learning experience and look forward to seeing your innovative solutions!","title":"Home"},{"location":"#tech-lab-fullstack-web-application-project","text":"In this tech lab, students will gain hands-on experience in building a fullstack web application using React, Flask, Redis, and Docker. This project is designed to provide a comprehensive understanding of modern web development practices and technologies. This tech lab is inspired by the real-world applications and technologies used at Bloomberg LP. By participating in this project, students will gain valuable skills that are highly relevant in the industry, preparing them for future opportunities in tech companies like Bloomberg.","title":"Tech Lab: Fullstack Web Application Project"},{"location":"#project-overview","text":"Students will work on creating a web application that involves both frontend and backend development. The frontend will be built using React, while the backend will be implemented using Flask. Redis will be used for data storage, and Docker will be utilized to containerize the application for easy deployment.","title":"Project Overview"},{"location":"#technologies-used","text":"React : A JavaScript library for building user interfaces. Flask : A lightweight WSGI web application framework in Python. Redis : An in-memory data structure store, used as a data store. Docker : A platform for developing, shipping, and running applications in standardized containers.","title":"Technologies Used"},{"location":"#learning-objectives","text":"By participating in this tech lab, students will: Frontend Development : Learn how to create dynamic and responsive user interfaces using React. Backend Development : Implement RESTful APIs using Flask to handle data retrieval and manipulation. Data Caching : Understand the importance of caching and how to use Redis to improve application performance. Containerization : Gain experience in containerizing applications using Docker for consistent and scalable deployment.","title":"Learning Objectives"},{"location":"#project-tasks","text":"","title":"Project Tasks"},{"location":"#backend-flask","text":"Develop APIs to handle data requests and responses. Integrate Redis for storing data to improve performance.","title":"Backend (Flask)"},{"location":"#frontend-nextjsreact","text":"Create a user interface to display data retrieved from the backend. Implement forms and components to interact with the backend APIs.","title":"Frontend (NextJS/React)"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#prerequisites","text":"Make sure the following technologies are downloaded prior to starting: Docker Git VS Code VS Code Dev Containers extension To get started with the project, follow these steps:","title":"Prerequisites"},{"location":"#fork-and-clone-the-project-repository","text":"Fork the project repository Clone the forked repo into your working directory, and navigate to it: git clone https://github.com/YOUR-USERNAME/bbit-learning-labs.git cd bbit-learning-labs/Tech-Lab-On-Campus/NewsFeed","title":"Fork and Clone the Project Repository"},{"location":"#open-the-development-container","text":"Open VSCode Install the Dev Containers extension here . If you already have it installed, continue to the next step. Open up the Command Palette in VSCode by either Ctrl+Shift+P (Windows) or Cmd+Shift+P (Mac) and type Dev Containers . VS Code may also show a pop up requesting to repoen in container, you can also click this. Click on Dev Containers: Reopen in Container VSCode will start downloading some docker images and install the necessary python and npm packages","title":"Open the Development Container"},{"location":"#run-the-website","text":"All of the make commands should be run from the Newfeed folder (using the cd bbit-learning-labs/Tech-Lab-On-Campus/NewsFeed command from above should have placed you in the right folder). You can also simplify your workspace by simply opening the Newsfeed folder in VS Code. To check that you are in the right folder on your computer terminal: Run pwd Verify that is says /local/path/to/bbit-learning-labs/Tech-Lab-On-Campus/NewsFeed , where \"/local/path/to\" is your local computers path to the bbit-learning-labs folder you cloned. An example of this would be: \"/user/USERNAME/Downloads\", but this will vary from person to person. To get the web app up and running: Open up a new VS Code terminal window , you can use Ctrl + Shift + ` In the terminal, run make run-backend to run the backend Open up another new terminal window, you can use Ctrl + Shift + ` again In the terminal, run make run-frontend to run the frontend \u2728 You should now be ready to develop! \u2728","title":"Run the Website"},{"location":"#developing","text":"Backend Tasks Frontend Tasks","title":"Developing"},{"location":"#troubleshooting","text":"","title":"Troubleshooting"},{"location":"#issues-with-docker","text":"If you are encountering issues with docker, you can use Github codespaces instead: Fork the repo Navigate to the forked repo Click on the green < > Code button Select the Codespaces tab and click on the + button In codespaces, open a new terminal and run cd Tech-Lab-On-Campus/NewsFeed/ run make install run make redis-in-docker run make run-backend Open up a new terminal and run make run-frontend A pop up should appear saying that port 3000 is in use. Click on Open in Browser . If not, the link can be opened from the terminal window","title":"Issues with Docker"},{"location":"#starting-frontend","text":"Clicking on http://localhost:3000 in the terminal opens to a blank page in the browser? Make sure you have done make run from the NewsFeed folder (where the Makefile is) It will probably have opened to 0.0.0.0:3000, just rewrite the url to localhost:3000 in the browser and it should load. npm packages are not loading If you are a bloomberg engineer, try turning off bbpvn while dev container sets up Otherwise, try running make clean or deleting any package.json or node_module directories and running: npm install from within the ./frontend folder. (Can reach via cd frontend ) If this does not work, try to open in codespaces, see issues with docker section above.","title":"Starting Frontend"},{"location":"#resources","text":"Resources We hope you enjoy this learning experience and look forward to seeing your innovative solutions!","title":"Resources"},{"location":"api-question-prompt/","text":"Coding Interview Question Prompt Design a Backend System for a News Website Newsfeed Page Question You are tasked with designing the backend system for a newsfeed page similar to those found on news websites like Bloomberg. The newsfeed should display articles from various sources, sorted by the time of publishing, with the most recent articles appearing first. Requirements Data Structures Design the data structures to store articles and sources. Explain your choice of data structures and how they will efficiently support the operations needed for the newsfeed. Operations Implement the following operation: get_newsfeed() -> List[Article] : Retrieve the newsfeed of articles, sorted by the most recent articles first. get_featured_article() -> Article : Retrieve the article to be featured on the main page. Efficiency Discuss the time and space complexity of each operation. Consider how to handle large numbers of users and articles efficiently. Coding Part from datetime import datetime from typing import List class Article: def __init__(self, source_id: str, content: str, timestamp: datetime): self.source_id = source_id self.content = content self.timestamp = timestamp class NewsfeedApi: def __init__(self): # Implementation here pass def get_newsfeed(self) -> List[Article]: # Implementation here return [] def get_featured_article(self) -> Article: # Implementation here return None Follow-Up Question Extend the backend system to keep track of the articles that users have bookmarked. The bookmarks should be kept in the order they were bookmarked. Users should also be able to remove a bookmark. Requirements Data Structures Design the data structures to store bookmarks for each user. Explain your choice of data structures and how they will efficiently support the operations needed for managing bookmarks. Operations Implement the following operations: bookmark_article(user_id: str, article_id: str) : Bookmark an article for a user. remove_bookmark(user_id: str, article_id: str) : Remove a bookmark for a user. get_bookmarks(user_id: str) -> List[Article] : Retrieve the list of bookmarked articles for a user in the order they were bookmarked. Follow-Up Question 2 Extend the backend system to keep track of the view count for each article. Implement a function to list the top n most viewed articles, where n is a user-defined number. Requirements Data Structures Modify the Article class to include a view count. Design the data structures to efficiently support the operations needed for tracking and retrieving the most viewed articles. Operations Implement the following operation: get_top_viewed_articles(n: int) -> List[Article] : Retrieve the top n most viewed articles. Follow-Up Question 3 Now, like in real news websites, articles will pretain to a certain news sector. Some examples of sectors include technology, finance, and politics. Implement a function to determine the most popular sector in the collection of articles. Requirements Data Structures Modify the Article class to include a sector. Design the data structures to efficiently support the operations needed for tracking and determining the most popular sector. Operations Implement the following operation: get_most_popular_sector() -> str : Retrieve the most popular sector from the collection of articles. Hint Is the meaning of popular straightforward, or is there some ambiguity? How would you approach this problem in an interview setting?","title":"Interview Question Prompt"},{"location":"api-question-prompt/#coding-interview-question-prompt","text":"","title":"Coding Interview Question Prompt"},{"location":"api-question-prompt/#design-a-backend-system-for-a-news-website-newsfeed-page","text":"","title":"Design a Backend System for a News Website Newsfeed Page"},{"location":"api-question-prompt/#question","text":"You are tasked with designing the backend system for a newsfeed page similar to those found on news websites like Bloomberg. The newsfeed should display articles from various sources, sorted by the time of publishing, with the most recent articles appearing first.","title":"Question"},{"location":"api-question-prompt/#requirements","text":"","title":"Requirements"},{"location":"api-question-prompt/#data-structures","text":"Design the data structures to store articles and sources. Explain your choice of data structures and how they will efficiently support the operations needed for the newsfeed.","title":"Data Structures"},{"location":"api-question-prompt/#operations","text":"Implement the following operation: get_newsfeed() -> List[Article] : Retrieve the newsfeed of articles, sorted by the most recent articles first. get_featured_article() -> Article : Retrieve the article to be featured on the main page.","title":"Operations"},{"location":"api-question-prompt/#efficiency","text":"Discuss the time and space complexity of each operation. Consider how to handle large numbers of users and articles efficiently.","title":"Efficiency"},{"location":"api-question-prompt/#coding-part","text":"from datetime import datetime from typing import List class Article: def __init__(self, source_id: str, content: str, timestamp: datetime): self.source_id = source_id self.content = content self.timestamp = timestamp class NewsfeedApi: def __init__(self): # Implementation here pass def get_newsfeed(self) -> List[Article]: # Implementation here return [] def get_featured_article(self) -> Article: # Implementation here return None","title":"Coding Part"},{"location":"api-question-prompt/#follow-up-question","text":"Extend the backend system to keep track of the articles that users have bookmarked. The bookmarks should be kept in the order they were bookmarked. Users should also be able to remove a bookmark.","title":"Follow-Up Question"},{"location":"api-question-prompt/#requirements_1","text":"","title":"Requirements"},{"location":"api-question-prompt/#data-structures_1","text":"Design the data structures to store bookmarks for each user. Explain your choice of data structures and how they will efficiently support the operations needed for managing bookmarks.","title":"Data Structures"},{"location":"api-question-prompt/#operations_1","text":"Implement the following operations: bookmark_article(user_id: str, article_id: str) : Bookmark an article for a user. remove_bookmark(user_id: str, article_id: str) : Remove a bookmark for a user. get_bookmarks(user_id: str) -> List[Article] : Retrieve the list of bookmarked articles for a user in the order they were bookmarked.","title":"Operations"},{"location":"api-question-prompt/#follow-up-question-2","text":"Extend the backend system to keep track of the view count for each article. Implement a function to list the top n most viewed articles, where n is a user-defined number.","title":"Follow-Up Question 2"},{"location":"api-question-prompt/#requirements_2","text":"","title":"Requirements"},{"location":"api-question-prompt/#data-structures_2","text":"Modify the Article class to include a view count. Design the data structures to efficiently support the operations needed for tracking and retrieving the most viewed articles.","title":"Data Structures"},{"location":"api-question-prompt/#operations_2","text":"Implement the following operation: get_top_viewed_articles(n: int) -> List[Article] : Retrieve the top n most viewed articles.","title":"Operations"},{"location":"api-question-prompt/#follow-up-question-3","text":"Now, like in real news websites, articles will pretain to a certain news sector. Some examples of sectors include technology, finance, and politics. Implement a function to determine the most popular sector in the collection of articles.","title":"Follow-Up Question 3"},{"location":"api-question-prompt/#requirements_3","text":"","title":"Requirements"},{"location":"api-question-prompt/#data-structures_3","text":"Modify the Article class to include a sector. Design the data structures to efficiently support the operations needed for tracking and determining the most popular sector.","title":"Data Structures"},{"location":"api-question-prompt/#operations_3","text":"Implement the following operation: get_most_popular_sector() -> str : Retrieve the most popular sector from the collection of articles.","title":"Operations"},{"location":"api-question-prompt/#hint","text":"Is the meaning of popular straightforward, or is there some ambiguity? How would you approach this problem in an interview setting?","title":"Hint"},{"location":"backend/","text":"Create Backend of News Feed Website You are tasked to get news articles from Redis Cache. You will be implementing two functions in order to display them on the News Feed Website. Do not worry about reading in the data from Redis; this is done for you in backend/app/utils/redis.py . Hints: Hint 1: There is only one function from backend/app/utils/redis.py you will need to fetch articles. It can return any object you store in redis and take any shape you like. Hint 2: In order to get the articles, look at how the data is written into Redis in backend/app/__init__.py . Hint 3 : You can test the backend / API changes without the frontend code! Run localhost:8000/{endpoint} . Hint 4: The relevant resources can be found from resources . Part 1: Write a function to Format Data In backend/app/newsfeed.py , implement a private method that can format the data into an article object. Check a json file in backend/app/resources/dataset/news to retrieve necessary information to create an article object. Part 2: Retrieve all News Articles In backend/app/newsfeed.py , implement the get_all_news method. You should: Figure out how you can retrieve the data from Redis Format the data into Articles Return the data as a list of articles. Once you finish get_all_news , implement get_newsfeed function in the backend/app/__init__.py for the API. You should be able to utilize the function you implemented above. Part 3: Retrieve Featured News In backend/app/newsfeed.py , implement the get_featured_news method. You should: Get all the articles Sort the articles by most recent published date and return the list Once you finish get_featured_news , implement get_featured_article function in the backend/app/__init__.py for the API. You should be able to utilize the function you implemented above.","title":"Backend"},{"location":"backend/#create-backend-of-news-feed-website","text":"You are tasked to get news articles from Redis Cache. You will be implementing two functions in order to display them on the News Feed Website. Do not worry about reading in the data from Redis; this is done for you in backend/app/utils/redis.py .","title":"Create Backend of News Feed Website"},{"location":"backend/#hints","text":"Hint 1: There is only one function from backend/app/utils/redis.py you will need to fetch articles. It can return any object you store in redis and take any shape you like. Hint 2: In order to get the articles, look at how the data is written into Redis in backend/app/__init__.py . Hint 3 : You can test the backend / API changes without the frontend code! Run localhost:8000/{endpoint} . Hint 4: The relevant resources can be found from resources .","title":"Hints:"},{"location":"backend/#part-1-write-a-function-to-format-data","text":"In backend/app/newsfeed.py , implement a private method that can format the data into an article object. Check a json file in backend/app/resources/dataset/news to retrieve necessary information to create an article object.","title":"Part 1: Write a function to Format Data"},{"location":"backend/#part-2-retrieve-all-news-articles","text":"In backend/app/newsfeed.py , implement the get_all_news method. You should: Figure out how you can retrieve the data from Redis Format the data into Articles Return the data as a list of articles. Once you finish get_all_news , implement get_newsfeed function in the backend/app/__init__.py for the API. You should be able to utilize the function you implemented above.","title":"Part 2: Retrieve all News Articles"},{"location":"backend/#part-3-retrieve-featured-news","text":"In backend/app/newsfeed.py , implement the get_featured_news method. You should: Get all the articles Sort the articles by most recent published date and return the list Once you finish get_featured_news , implement get_featured_article function in the backend/app/__init__.py for the API. You should be able to utilize the function you implemented above.","title":"Part 3: Retrieve Featured News"},{"location":"frontend/","text":"Create Frontend of News Feed Website You are tasked with populating the frontend of a news feed webpage which is going to display news articles. You will populate a Featured News section as well as a News Feed Section. You will take advantage of reusable components in React . After that, you will connect the frontend to the backend in order to get data from the api your backend partner built. Hints Hint 1: Some classes included in frontend/src/styles/globals.css may help with styling. Hint 2: Array.map() may be useful. Hint 3: This Medium blog may be useful to figure how to fetch data. Hint 4: The relevant resources can be found from resources . Part 1 : Display a Featured News Article In frontend/src/components/FeaturedNews.tsx implement the component that will display the featured news article. It should use the props to display: The featured article's title The featured article's image A portion of the selected article's body, truncated so that it fits nicely in the section Once completing Part 1, Once completing this part, you should be able to see the Featured News Article at the top of the page. For more information on how to create a component, refer to the react basics docs. Part 2 : Create a reusable news card to use with general stories In frontend/src/components/NewsCard.tsx implement a reusable news card component to use with the news feed articles (articles that aren't the featured story) The NewsCard component should have these properties: The article's title The article's image A truncated version of the article's body This component should be reusable so that it can be used to populate all stories on the news page. Once completing Part 2, you should be able to see a few test articles on the right side of the screen. Part 3 : Populate a news feed with the given articles In frontend/src/components/NewsFeed.tsx populate a news feed using the given articles Use the reusable News Card Component created in Part 2 to create the articles in the new feeds Once completing Part 3, you should be able to see a grid of news articles at the bottom of the page under the Featured News Article Section. Part 4 : API Integration In frontend/src/pages/news.tsx fetch article data from the API call. The Featured Article Data and the News Feed Data should both come from the API Fetch the featured article from /api/news/get-featured-article Fetch the news feed data from /api/news/get-newsfeed Use the set functions defined above to update the articles and featuredArticle variables Once completing Part 4, you should be able to see news articles different from the dummy data originally provided. Stretch Goals You now have a news feed up and running connected to a backend service! You can follow up with some of the following optimizations if interested. Responsiveness: a website typically adjusts itself to fit the screen it is being displayed on in order to make it most presentable to the end user. Play around with the layout and responsive properties to find the best experience. Styling: this is a pretty plain website that we have so far. Are there any styling properties or elements you can add to make it look more like a news website? Look at Bloomberg News for inspo! Deploy to Heroku : You have a full website now, which you can deploy to heroku to use as part of your portfolio!","title":"Frontend"},{"location":"frontend/#create-frontend-of-news-feed-website","text":"You are tasked with populating the frontend of a news feed webpage which is going to display news articles. You will populate a Featured News section as well as a News Feed Section. You will take advantage of reusable components in React . After that, you will connect the frontend to the backend in order to get data from the api your backend partner built.","title":"Create Frontend of News Feed Website"},{"location":"frontend/#hints","text":"Hint 1: Some classes included in frontend/src/styles/globals.css may help with styling. Hint 2: Array.map() may be useful. Hint 3: This Medium blog may be useful to figure how to fetch data. Hint 4: The relevant resources can be found from resources .","title":"Hints"},{"location":"frontend/#part-1-display-a-featured-news-article","text":"In frontend/src/components/FeaturedNews.tsx implement the component that will display the featured news article. It should use the props to display: The featured article's title The featured article's image A portion of the selected article's body, truncated so that it fits nicely in the section Once completing Part 1, Once completing this part, you should be able to see the Featured News Article at the top of the page. For more information on how to create a component, refer to the react basics docs.","title":"Part 1 : Display a Featured News Article"},{"location":"frontend/#part-2-create-a-reusable-news-card-to-use-with-general-stories","text":"In frontend/src/components/NewsCard.tsx implement a reusable news card component to use with the news feed articles (articles that aren't the featured story) The NewsCard component should have these properties: The article's title The article's image A truncated version of the article's body This component should be reusable so that it can be used to populate all stories on the news page. Once completing Part 2, you should be able to see a few test articles on the right side of the screen.","title":"Part 2 : Create a reusable news card to use with general stories"},{"location":"frontend/#part-3-populate-a-news-feed-with-the-given-articles","text":"In frontend/src/components/NewsFeed.tsx populate a news feed using the given articles Use the reusable News Card Component created in Part 2 to create the articles in the new feeds Once completing Part 3, you should be able to see a grid of news articles at the bottom of the page under the Featured News Article Section.","title":"Part 3 : Populate a news feed with the given articles"},{"location":"frontend/#part-4-api-integration","text":"In frontend/src/pages/news.tsx fetch article data from the API call. The Featured Article Data and the News Feed Data should both come from the API Fetch the featured article from /api/news/get-featured-article Fetch the news feed data from /api/news/get-newsfeed Use the set functions defined above to update the articles and featuredArticle variables Once completing Part 4, you should be able to see news articles different from the dummy data originally provided.","title":"Part 4 : API Integration"},{"location":"frontend/#stretch-goals","text":"You now have a news feed up and running connected to a backend service! You can follow up with some of the following optimizations if interested. Responsiveness: a website typically adjusts itself to fit the screen it is being displayed on in order to make it most presentable to the end user. Play around with the layout and responsive properties to find the best experience. Styling: this is a pretty plain website that we have so far. Are there any styling properties or elements you can add to make it look more like a news website? Look at Bloomberg News for inspo! Deploy to Heroku : You have a full website now, which you can deploy to heroku to use as part of your portfolio!","title":"Stretch Goals"},{"location":"resources/docker-basics/","text":"Understanding of Docker What is Docker and Why Use It? Docker is an open-source project that allows engineers to build, test, and deploy software applications quickly using containers. It helps developers automate the deployment of applications and provides a consistent evironment to development and production enviroments so that software can run across multiple enviroments. When running docker, package collisions between multiple applications on the same computer can be avoided. Also protyping (or testing) new features is much easier. Containers Containers packages software into standard units with the libraries, system tools, and runtime it needs to run. A docker container image is lightweight, standalone, executable package of software that includes everything to run an application: the code, runtime, system tools, system libraries, and settings.","title":"Docker Basics"},{"location":"resources/docker-basics/#understanding-of-docker","text":"","title":"Understanding of Docker"},{"location":"resources/docker-basics/#what-is-docker-and-why-use-it","text":"Docker is an open-source project that allows engineers to build, test, and deploy software applications quickly using containers. It helps developers automate the deployment of applications and provides a consistent evironment to development and production enviroments so that software can run across multiple enviroments. When running docker, package collisions between multiple applications on the same computer can be avoided. Also protyping (or testing) new features is much easier.","title":"What is Docker and Why Use It?"},{"location":"resources/docker-basics/#containers","text":"Containers packages software into standard units with the libraries, system tools, and runtime it needs to run. A docker container image is lightweight, standalone, executable package of software that includes everything to run an application: the code, runtime, system tools, system libraries, and settings.","title":"Containers"},{"location":"resources/git-basics/","text":"Understanding Git & Github What is Git? Git is a distributed version control system that helps developers collaborate on projects of any scale. This allows developers to bring a repo full of code down to their workstations, perform their work items, and then put it back into a central server. Commands You'll Need For Today # indicates a comment in bash Check status of changes # See list of files changed git status The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git. Upload Your Changes Step 1: Add Files to be Tracked # add files by paths git add [fileName] # OR add file interactively one by one git add -p # OR add all changed files (what you'll do more often than not) git add --all The git add command adds a change in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit. Upload Your Changes Step 2: Save Changes in a Commit # Commit changes with a descriptive commit message git commit -m \"commit description\" Changes are not actually recorded after git add until you run git commit . A commit captures a snapshot of the project's currently staged changes. Committed snapshots can be thought of as \u201csafe\u201d versions of a project\u2014Git will never change them unless you explicitly ask it to. Upload Your Changes Step 3: Push Committed Changes to Remote Repository # Push changes up to remote repo in whatever branch you are working in git push # IF it is your first time pushing, git will show you a message of where to set the push stream git push --set-upstream origin my-new-feature The git push command is used to upload local repository content to a remote repository. Pushing is how you transfer commits from your local repository to a remote repo. Get changes from origin/main to current branch # origin/main => local main git pull origin main The git pull command is used to fetch and download content from a remote repository and immediately update the local repository to match that content An In-Depth Look at Git So why do we need version control? Think about a video game where you've gotten to level 16. But to beat the game completely, you have to make it to level 20. Should you only be able to finish the game if you complete flawlessly it in one try? Of course not. With a version control system you can commit your code, kind of like a checkpoint in a video game, before you actually push it and merge it into your codebase. With version control, you can also roll back to previous commits if you want to change something you did without having to Ctrl+Z 100 times. This is why you should commit often and with detailed commit messages. Some terms you should understand about version control: Version control - known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time Repository or \"repo\" - Each Git project is called a repository, or \u201crepo\u201d for short. A repo stores all the files and changes made to your project. It\u2019s like a project with memory allowing you to move back and forward in time and observe the ways you have changed and modified your project. Thus, the repo stores data and change information. For developers it can be especially useful as they are learning version control systems to practice how to clone a GitHub repository and know how to delete a repository in GitHub. The three big things you do with version control are commit, clone, and branch. When you commit a change, you add your latest changes to your repo and are directing information to be filed. As in life, commitment is a serious responsibility \u2013 and is why every commit needs a serious commit message. A commit message explains changes and is the primary way to communicate changes to your development team. When you commit, you push your changes to the repository, and all information heading upstream to your repo is pushed. This push propels information from your local source into the shared repository. Diffs - Every time you commit there are differences between the project from the last save point to the new one. These changes are called differences, or \u201cdiffs\u201d for short. You can compare changes between commits by looking at the diffs. Merge Conflict - A conflict occurs when two parties change the same file and there's no automatic way to reconcile the changes. You must resolve the change by selecting which change wins. Clone - When you clone a Git repository, you create a local copy to work on and your version will match the contents of the repository at the time you cloned it. For instance, you can clone a repository on GitHub to your computer where you can compile it from source, modify it, and more. Pull - If you've been working on a clone project, you may need to catch up with changes others have made by pulling, which changes revisions from the repository to your local copy. Forking - Another way to copy a repository is called \u201cforking,\u201d and is more like a fork in a tree. Unlike when you clone and make a copy on your computer, forking involves making a new repository, typically on GitHub or whatever hosting site you're using. A fork has all the contents of the original, but you are now the owner of this new repository and you're starting a new development project. You're copying a project when you fork and you're working on a project when you clone. Branch - Branches let you create alternate versions of your project. When you branch you can work on new features and try new ideas without messing with your main work. Consider this \u2013 your main work may have many names and, like a tree trunk, it\u2019s commonly called the \u201cmaster,\u201d \u201cmaster branch,\u201d or \u201cbaseline.\u201d The trunk or master is where your team keeps its primary project development and if it\u2019s messed with, your team will suffer. Thus, if you plan to work on something that will take a while and may break your build, be sure to branch so you don't interfere with the work of others on your team. Open Source - The term open source refers to something people can modify and share because its design is publicly accessible. There are other distributed version control systems that are widely used, for example Mercurial. Instead of typing git before commands, you would use hg for this version control system. The three most popular DVCS (Distributed Version Control Systems) are Mercurial, Git, and Bazaar. Here, we will solely focus on Git. Creating your own Organizations and Repositories You can create a repository for each project you start on your personal GitHub account, but many suggest creating a separate organization for projects you plan to collaborate on or make open-source. QuickStart tutorial for Repositories README Files You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. If a filed titled README.md file in your repository's hidden .github, root, or docs directory, GitHub will recognize and automatically surface your README to repository visitors. If a repository contains more than one README file, then the file shown is chosen from locations in the following order: the .github directory, then the repository's root directory, and finally the docs directory. Understanding Branches & How to Collaborate Pull Requests Pull requests let you tell others about changes you've pushed to a branch in a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before your changes are merged into the base branch. In order to help your team, make sure you publish your Pull Requests when they're ready with clean code and helpful descriptions``` Merging Merging is Git's way of putting a forked history back together again. The git merge command lets you take the independent lines of development created by git branch and integrate them into a single branch. Note that all of the commands presented below merge into the current branch. Merge Conflicts Merge conflicts happen when you merge branches that have competing commits, and Git needs your help to decide which changes to incorporate in the final merge Keep your code loosely coupled and divide work appropriately to try to avoid merge conflicts as much as possible, though they will eventually be inevitable Rebasing The git rebase command allows you to easily change a series of commits, modifying the history of your repository. You can reorder, edit, or squash commits together. Typically, you would use git rebase to: Edit previous commit messages Combine multiple commits into one Delete or revert commits that are no longer necessary Common Commands You Should Know For more, check out the Git Cheat Sheet First Time Git users Command Action git config -l check your Git configuration - returns a list of information about your git configuration including user name and email git config --global user.name \"Genesis\" Set up your username git config --global user.email \"genesis@gmail.com\" This command lets you setup the user email address you'll use in your commits. git init initialize a git Repo Every Day Commands Command Action git add [file names] First step in pushing changes. This adds changes in the file listed to be tracked for changes. To add all changes in all files, run git add . git commit -m \"message\" Commit your code with a detailed message git push Push local changes up to remote git branch git checkout -b branch-name create new branch, branch-name git checkout branch-name open up the branch branch-name","title":"Git Basics"},{"location":"resources/git-basics/#understanding-git-github","text":"","title":"Understanding Git &amp; Github"},{"location":"resources/git-basics/#what-is-git","text":"Git is a distributed version control system that helps developers collaborate on projects of any scale. This allows developers to bring a repo full of code down to their workstations, perform their work items, and then put it back into a central server.","title":"What is Git?"},{"location":"resources/git-basics/#commands-youll-need-for-today","text":"# indicates a comment in bash","title":"Commands You'll Need For Today"},{"location":"resources/git-basics/#check-status-of-changes","text":"# See list of files changed git status The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git.","title":"Check status of changes"},{"location":"resources/git-basics/#upload-your-changes-step-1-add-files-to-be-tracked","text":"# add files by paths git add [fileName] # OR add file interactively one by one git add -p # OR add all changed files (what you'll do more often than not) git add --all The git add command adds a change in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit.","title":"Upload Your Changes Step 1: Add Files to be Tracked"},{"location":"resources/git-basics/#upload-your-changes-step-2-save-changes-in-a-commit","text":"# Commit changes with a descriptive commit message git commit -m \"commit description\" Changes are not actually recorded after git add until you run git commit . A commit captures a snapshot of the project's currently staged changes. Committed snapshots can be thought of as \u201csafe\u201d versions of a project\u2014Git will never change them unless you explicitly ask it to.","title":"Upload Your Changes Step 2: Save Changes in a Commit"},{"location":"resources/git-basics/#upload-your-changes-step-3-push-committed-changes-to-remote-repository","text":"# Push changes up to remote repo in whatever branch you are working in git push # IF it is your first time pushing, git will show you a message of where to set the push stream git push --set-upstream origin my-new-feature The git push command is used to upload local repository content to a remote repository. Pushing is how you transfer commits from your local repository to a remote repo.","title":"Upload Your Changes Step 3: Push Committed Changes to Remote Repository"},{"location":"resources/git-basics/#get-changes-from-originmain-to-current-branch","text":"# origin/main => local main git pull origin main The git pull command is used to fetch and download content from a remote repository and immediately update the local repository to match that content","title":"Get changes from origin/main to current branch"},{"location":"resources/git-basics/#an-in-depth-look-at-git","text":"","title":"An In-Depth Look at Git"},{"location":"resources/git-basics/#so-why-do-we-need-version-control","text":"Think about a video game where you've gotten to level 16. But to beat the game completely, you have to make it to level 20. Should you only be able to finish the game if you complete flawlessly it in one try? Of course not. With a version control system you can commit your code, kind of like a checkpoint in a video game, before you actually push it and merge it into your codebase. With version control, you can also roll back to previous commits if you want to change something you did without having to Ctrl+Z 100 times. This is why you should commit often and with detailed commit messages.","title":"So why do we need version control?"},{"location":"resources/git-basics/#some-terms-you-should-understand-about-version-control","text":"Version control - known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time Repository or \"repo\" - Each Git project is called a repository, or \u201crepo\u201d for short. A repo stores all the files and changes made to your project. It\u2019s like a project with memory allowing you to move back and forward in time and observe the ways you have changed and modified your project. Thus, the repo stores data and change information. For developers it can be especially useful as they are learning version control systems to practice how to clone a GitHub repository and know how to delete a repository in GitHub. The three big things you do with version control are commit, clone, and branch. When you commit a change, you add your latest changes to your repo and are directing information to be filed. As in life, commitment is a serious responsibility \u2013 and is why every commit needs a serious commit message. A commit message explains changes and is the primary way to communicate changes to your development team. When you commit, you push your changes to the repository, and all information heading upstream to your repo is pushed. This push propels information from your local source into the shared repository. Diffs - Every time you commit there are differences between the project from the last save point to the new one. These changes are called differences, or \u201cdiffs\u201d for short. You can compare changes between commits by looking at the diffs. Merge Conflict - A conflict occurs when two parties change the same file and there's no automatic way to reconcile the changes. You must resolve the change by selecting which change wins. Clone - When you clone a Git repository, you create a local copy to work on and your version will match the contents of the repository at the time you cloned it. For instance, you can clone a repository on GitHub to your computer where you can compile it from source, modify it, and more. Pull - If you've been working on a clone project, you may need to catch up with changes others have made by pulling, which changes revisions from the repository to your local copy. Forking - Another way to copy a repository is called \u201cforking,\u201d and is more like a fork in a tree. Unlike when you clone and make a copy on your computer, forking involves making a new repository, typically on GitHub or whatever hosting site you're using. A fork has all the contents of the original, but you are now the owner of this new repository and you're starting a new development project. You're copying a project when you fork and you're working on a project when you clone. Branch - Branches let you create alternate versions of your project. When you branch you can work on new features and try new ideas without messing with your main work. Consider this \u2013 your main work may have many names and, like a tree trunk, it\u2019s commonly called the \u201cmaster,\u201d \u201cmaster branch,\u201d or \u201cbaseline.\u201d The trunk or master is where your team keeps its primary project development and if it\u2019s messed with, your team will suffer. Thus, if you plan to work on something that will take a while and may break your build, be sure to branch so you don't interfere with the work of others on your team. Open Source - The term open source refers to something people can modify and share because its design is publicly accessible. There are other distributed version control systems that are widely used, for example Mercurial. Instead of typing git before commands, you would use hg for this version control system. The three most popular DVCS (Distributed Version Control Systems) are Mercurial, Git, and Bazaar. Here, we will solely focus on Git.","title":"Some terms you should understand about version control:"},{"location":"resources/git-basics/#creating-your-own-organizations-and-repositories","text":"You can create a repository for each project you start on your personal GitHub account, but many suggest creating a separate organization for projects you plan to collaborate on or make open-source.","title":"Creating your own Organizations and Repositories"},{"location":"resources/git-basics/#quickstart-tutorial-for-repositories","text":"","title":"QuickStart tutorial for Repositories"},{"location":"resources/git-basics/#readme-files","text":"You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. If a filed titled README.md file in your repository's hidden .github, root, or docs directory, GitHub will recognize and automatically surface your README to repository visitors. If a repository contains more than one README file, then the file shown is chosen from locations in the following order: the .github directory, then the repository's root directory, and finally the docs directory.","title":"README Files"},{"location":"resources/git-basics/#understanding-branches-how-to-collaborate","text":"","title":"Understanding Branches &amp; How to Collaborate"},{"location":"resources/git-basics/#pull-requests","text":"Pull requests let you tell others about changes you've pushed to a branch in a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before your changes are merged into the base branch. In order to help your team, make sure you publish your Pull Requests when they're ready with clean code and helpful descriptions```","title":"Pull Requests"},{"location":"resources/git-basics/#merging","text":"Merging is Git's way of putting a forked history back together again. The git merge command lets you take the independent lines of development created by git branch and integrate them into a single branch. Note that all of the commands presented below merge into the current branch.","title":"Merging"},{"location":"resources/git-basics/#merge-conflicts","text":"Merge conflicts happen when you merge branches that have competing commits, and Git needs your help to decide which changes to incorporate in the final merge Keep your code loosely coupled and divide work appropriately to try to avoid merge conflicts as much as possible, though they will eventually be inevitable","title":"Merge Conflicts"},{"location":"resources/git-basics/#rebasing","text":"The git rebase command allows you to easily change a series of commits, modifying the history of your repository. You can reorder, edit, or squash commits together. Typically, you would use git rebase to: Edit previous commit messages Combine multiple commits into one Delete or revert commits that are no longer necessary","title":"Rebasing"},{"location":"resources/git-basics/#common-commands-you-should-know","text":"For more, check out the Git Cheat Sheet","title":"Common Commands You Should Know"},{"location":"resources/git-basics/#first-time-git-users","text":"Command Action git config -l check your Git configuration - returns a list of information about your git configuration including user name and email git config --global user.name \"Genesis\" Set up your username git config --global user.email \"genesis@gmail.com\" This command lets you setup the user email address you'll use in your commits. git init initialize a git Repo","title":"First Time Git users"},{"location":"resources/git-basics/#every-day-commands","text":"Command Action git add [file names] First step in pushing changes. This adds changes in the file listed to be tracked for changes. To add all changes in all files, run git add . git commit -m \"message\" Commit your code with a detailed message git push Push local changes up to remote git branch git checkout -b branch-name create new branch, branch-name git checkout branch-name open up the branch branch-name","title":"Every Day Commands"},{"location":"resources/html-basics/","text":"HTML Basics This page will go through some basics to HTML that should give a quick start for writing in the markdown language. For more in depth explanation and guides, feel free to do a quick search, or read here . Common HTML Tags Below are some common html tags that may be useful in the lab. 1. <div> Tag The <div> tag is a block-level element used to group other elements together. It does not inherently have any styling but can be styled using CSS. Example: <div class=\"container\"> <p>This is a paragraph inside a div.</p> </div> 2. <span> Tag The <span> tag is an inline element used to group text or other inline elements. Like <div> , it does not have any default styling and relies on CSS for styling. Example: <p>This is a <span class=\"highlight\">highlighted</span> text.</p> 3. <h1> , <h2> , <h3> , <h4> , <h5> , <h6> Tags These tags represent headings, with <h1> being the highest level and <h6> the lowest. They have default styles such as font size and weight, but these can be overridden with CSS. Example: <h1>Main Heading</h1> <h2>Subheading</h2> <h3>Sub-subheading</h3> 4. <a> Tag The <a> tag defines a hyperlink, which is used to link from one page to another. It can be styled using CSS to change its color, underline, etc. It always requires an href attribute to where it links to, which can be within the page (a header) or another page (within or outside the website). The target attribute can be set to \"_blank\" to tell the browser to open the link in a new tab. Example: <!-- Outside website example --> <a href=\"https://www.example.com\" target=\"_blank\">Visit Example</a> <!-- Relative page example --> <a href=\"/about\">About Page</a> <!-- Header example --> <a href=\"#faq\">See the FAQ section below</a> 5. <p> Tag The <p> tag defines a paragraph. It is a block-level element with default margin and padding, which can be customized using CSS. Example: <p>This is a paragraph of text.</p> 6. <img> Tag The <img> tag is used to embed images in a webpage. It is an inline element and can be styled using CSS to set dimensions, borders, etc. The src attribute is always required to tell where the image should be displayed form, which can come from within the webapp or from a link on some hosted site on the internet. The alt attribute is good to set in case the image is not able to be rendered, alternative text is shown describing the image. Example: <!-- From within the app --> <img src=\"image.jpg\" alt=\"Sample Image\" width=\"200\" height=\"150\"> <!-- From the internet --> <img src=\"https://google.com/some-image.png\" alt=\"Sample Image\" width=\"200\" height=\"150\"> Inheriting Styles with CSS HTML elements inherit styles from their parent elements unless explicitly overridden. CSS (Cascading Style Sheets) is used to apply styles to HTML elements. Here is an example of how class names can be used to style components: <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>HTML Basics</title> <!-- This tag below links to the stylesheet, letting the HTML know to read from it. --> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <div class=\"container\"> <h1 class=\"title\">Welcome to HTML Basics</h1> <p class=\"description\">This is a paragraph explaining the basics of HTML.</p> <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\" class=\"link\">Learn more about CSS</a> <img src=\"image.jpg\" alt=\"Sample Image\" class=\"image\"> </div> </body> </html> More on CSS here .","title":"HTML Basics"},{"location":"resources/html-basics/#html-basics","text":"This page will go through some basics to HTML that should give a quick start for writing in the markdown language. For more in depth explanation and guides, feel free to do a quick search, or read here .","title":"HTML Basics"},{"location":"resources/html-basics/#common-html-tags","text":"Below are some common html tags that may be useful in the lab.","title":"Common HTML Tags"},{"location":"resources/html-basics/#1-div-tag","text":"The <div> tag is a block-level element used to group other elements together. It does not inherently have any styling but can be styled using CSS. Example: <div class=\"container\"> <p>This is a paragraph inside a div.</p> </div>","title":"1. &lt;div&gt; Tag"},{"location":"resources/html-basics/#2-span-tag","text":"The <span> tag is an inline element used to group text or other inline elements. Like <div> , it does not have any default styling and relies on CSS for styling. Example: <p>This is a <span class=\"highlight\">highlighted</span> text.</p>","title":"2. &lt;span&gt; Tag"},{"location":"resources/html-basics/#3-h1-h2-h3-h4-h5-h6-tags","text":"These tags represent headings, with <h1> being the highest level and <h6> the lowest. They have default styles such as font size and weight, but these can be overridden with CSS. Example: <h1>Main Heading</h1> <h2>Subheading</h2> <h3>Sub-subheading</h3>","title":"3. &lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt; Tags"},{"location":"resources/html-basics/#4-a-tag","text":"The <a> tag defines a hyperlink, which is used to link from one page to another. It can be styled using CSS to change its color, underline, etc. It always requires an href attribute to where it links to, which can be within the page (a header) or another page (within or outside the website). The target attribute can be set to \"_blank\" to tell the browser to open the link in a new tab. Example: <!-- Outside website example --> <a href=\"https://www.example.com\" target=\"_blank\">Visit Example</a> <!-- Relative page example --> <a href=\"/about\">About Page</a> <!-- Header example --> <a href=\"#faq\">See the FAQ section below</a>","title":"4. &lt;a&gt; Tag"},{"location":"resources/html-basics/#5-p-tag","text":"The <p> tag defines a paragraph. It is a block-level element with default margin and padding, which can be customized using CSS. Example: <p>This is a paragraph of text.</p>","title":"5. &lt;p&gt; Tag"},{"location":"resources/html-basics/#6-img-tag","text":"The <img> tag is used to embed images in a webpage. It is an inline element and can be styled using CSS to set dimensions, borders, etc. The src attribute is always required to tell where the image should be displayed form, which can come from within the webapp or from a link on some hosted site on the internet. The alt attribute is good to set in case the image is not able to be rendered, alternative text is shown describing the image. Example: <!-- From within the app --> <img src=\"image.jpg\" alt=\"Sample Image\" width=\"200\" height=\"150\"> <!-- From the internet --> <img src=\"https://google.com/some-image.png\" alt=\"Sample Image\" width=\"200\" height=\"150\">","title":"6. &lt;img&gt; Tag"},{"location":"resources/html-basics/#inheriting-styles-with-css","text":"HTML elements inherit styles from their parent elements unless explicitly overridden. CSS (Cascading Style Sheets) is used to apply styles to HTML elements. Here is an example of how class names can be used to style components: <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>HTML Basics</title> <!-- This tag below links to the stylesheet, letting the HTML know to read from it. --> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <div class=\"container\"> <h1 class=\"title\">Welcome to HTML Basics</h1> <p class=\"description\">This is a paragraph explaining the basics of HTML.</p> <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\" class=\"link\">Learn more about CSS</a> <img src=\"image.jpg\" alt=\"Sample Image\" class=\"image\"> </div> </body> </html> More on CSS here .","title":"Inheriting Styles with CSS"},{"location":"resources/next-js-basics/","text":"Next.js Basics What is Next.js? Next.js is a React framework that enables several extra features, including server-side rendering and generating static websites. It is built on top of Node.js (a server that uses Javascript to run) and can be used to create web applications with React. How Next.js Works Next.js works by allowing developers to create pages in a pages directory. Each file in this directory becomes a route in the application, i.e. the file structure is used as the router for pages in the application. Next.js handles the rendering of these pages on the server side, which can improve performance and SEO. Benefits of Next.js Server-Side Rendering (SSR): Improves performance and SEO by rendering pages on the server. Static Site Generation (SSG): Generates static HTML at build time, which can be served quickly. API Routes: Allows you to create API endpoints within the same project. Automatic Code Splitting: Only loads the necessary JavaScript for the page being rendered. Built-in CSS and Sass support: Easily import CSS and Sass files. Fast Refresh: Provides instant feedback on edits made to your React components. Getting Started with Next.js To get started with Next.js, follow these steps: Install Node.js: Ensure you have Node.js installed on your machine. Create a new Next.js project: bash npx create-next-app@latest my-next-app cd my-next-app Run the development server: bash npm run dev Open your browser: Navigate to http://localhost:3000 to see your new Next.js app. Create a new page: Add a new file about.js in the pages directory with the following content: javascript // filepath: NewsFeed/pages/about.js export default function About() { return <h1>About Page</h1>; } Visit the new page: Open http://localhost:3000/about in your browser to see the new page. For more information on how Next works, visit the official docs .","title":"NextJs Basics"},{"location":"resources/next-js-basics/#nextjs-basics","text":"","title":"Next.js Basics"},{"location":"resources/next-js-basics/#what-is-nextjs","text":"Next.js is a React framework that enables several extra features, including server-side rendering and generating static websites. It is built on top of Node.js (a server that uses Javascript to run) and can be used to create web applications with React.","title":"What is Next.js?"},{"location":"resources/next-js-basics/#how-nextjs-works","text":"Next.js works by allowing developers to create pages in a pages directory. Each file in this directory becomes a route in the application, i.e. the file structure is used as the router for pages in the application. Next.js handles the rendering of these pages on the server side, which can improve performance and SEO.","title":"How Next.js Works"},{"location":"resources/next-js-basics/#benefits-of-nextjs","text":"Server-Side Rendering (SSR): Improves performance and SEO by rendering pages on the server. Static Site Generation (SSG): Generates static HTML at build time, which can be served quickly. API Routes: Allows you to create API endpoints within the same project. Automatic Code Splitting: Only loads the necessary JavaScript for the page being rendered. Built-in CSS and Sass support: Easily import CSS and Sass files. Fast Refresh: Provides instant feedback on edits made to your React components.","title":"Benefits of Next.js"},{"location":"resources/next-js-basics/#getting-started-with-nextjs","text":"To get started with Next.js, follow these steps: Install Node.js: Ensure you have Node.js installed on your machine. Create a new Next.js project: bash npx create-next-app@latest my-next-app cd my-next-app Run the development server: bash npm run dev Open your browser: Navigate to http://localhost:3000 to see your new Next.js app. Create a new page: Add a new file about.js in the pages directory with the following content: javascript // filepath: NewsFeed/pages/about.js export default function About() { return <h1>About Page</h1>; } Visit the new page: Open http://localhost:3000/about in your browser to see the new page. For more information on how Next works, visit the official docs .","title":"Getting Started with Next.js"},{"location":"resources/overview/","text":"Instructions for creating resource documents In this directory, you can find introductions to the basic functionality of the technologies that will be used for this tech lab. The technologies planned to be used are: Git Docker Python Redis JavaScript React NextJS","title":"Overview"},{"location":"resources/overview/#instructions-for-creating-resource-documents","text":"In this directory, you can find introductions to the basic functionality of the technologies that will be used for this tech lab. The technologies planned to be used are: Git Docker Python Redis JavaScript React NextJS","title":"Instructions for creating resource documents"},{"location":"resources/python-basics/","text":"Python Basics Import Modules To import a module, for example sys , use the keyword import : import sys If you are trying to import only one method or a class from another file / module: from dog_interface import DogInterface Creating a Class Classes are the building blocks of object-oriented programming. In python, to create a class we use the keyword class to define a class. For example, let's say I want to create a class called Animal. Within a class, there is a constructor method called __init__ which initalizes a newly created object. Here is an example of a simple class: class Animal: def __init__(self, name): # body of constructor self.name = name def eat(self): print(self.name, \"is eating.\") Saving a Instance Variable and Calling the Variable In python, there is a keyword, self , which represents an instance of a class. This keyword allows you to access variables, methods, and attributes in the class. Let's build out our Dog interface and pass in the name of a dog, and have a function named bark: class Dog(DogInterface): def __init__(self, name) -> None: # Save parameters to instance variable self.name = name def bark(self) -> None: # Print {name of dog} is barking! print(self.name, \"is barking!\") We can access the name initialized in the __init__ method with self . When we want to create an object of this class with a name and call the method, bark() , it can access the name given and print out the statement. Remember, this is an example. You can initialize more variables within any of the class methods and access it through self ! Creating an Interface Python does not have a keyword for interfaces. An interface is an abstract class that defines methods which are not implemented. An interface is implemented in the same way as a class, however, an interface will have abstract methods so you will see the keyword pass in those methods. That means that any subclass will construct those methods how it wants to use them. So two different classes which inherit from the same intergace will inherit the same functions, but can have different implementations. Here is an example of a simple interface: class DogInterface: def __init__(self, name) -> None: # Save parameters to class variables pass def bark(self) -> None: # Print {name of dog} is barking! pass Inheritance Inheritance allows us to define a class that can inherit methods and properties of another existing class or interface. Let us use the example DogInterface from above. Let's create a Dog class that inherits DogInterface: class Dog(DogInterface): def __init__(self, name): # Save parameters to instance variable self.name = name def bark(self): # Print {name of dog} is barking! print(self.name, \"is barking!\") Since Dog is inheriting DogInterface , we implement the methods according to how we want both methods to work. To inherit from another class would have the same initialization, but the child class can have different methods. Let's write a Dog class inheriting the class Animal that was mentioned in the Creating a Class section: class Dog(Animal): def __init__(self, name): self.name = name Since Dog is inheriting Animal , we can use the method eat() on all Dog objects. snoopy = Dog(\"Snoopy\") snoopy.eat() # this will print: \"Snoopy is eating.\" Reading from Command Line Using sys There are a few ways to read arguments from the command line, but we will go over using sys . In this module, there is a variable, sys.argv , which is a list. Some things to note: since sys.argv is a list, we can get the length of arguments with len() sys.argv[0] will be the name of the file given All arguments are strings ! Example Command: python3 read_cmd_line.py apple banana Code: \"\"\" Read arguments from command line using sys.argv \"\"\" import sys print(\"Name of the program using sys.argv[0]: \", sys.argv[0]) print(\"Length of arguments given including program name: \", len(sys.argv)) print(\"Argument list: \", sys.argv) print(\"Argument list type: \", type(sys.argv)) print(\"Give the first argument (after program name): \", sys.argv[1]) Output:","title":"Python Basics"},{"location":"resources/python-basics/#python-basics","text":"","title":"Python Basics"},{"location":"resources/python-basics/#import-modules","text":"To import a module, for example sys , use the keyword import : import sys If you are trying to import only one method or a class from another file / module: from dog_interface import DogInterface","title":"Import Modules"},{"location":"resources/python-basics/#creating-a-class","text":"Classes are the building blocks of object-oriented programming. In python, to create a class we use the keyword class to define a class. For example, let's say I want to create a class called Animal. Within a class, there is a constructor method called __init__ which initalizes a newly created object. Here is an example of a simple class: class Animal: def __init__(self, name): # body of constructor self.name = name def eat(self): print(self.name, \"is eating.\")","title":"Creating a Class"},{"location":"resources/python-basics/#saving-a-instance-variable-and-calling-the-variable","text":"In python, there is a keyword, self , which represents an instance of a class. This keyword allows you to access variables, methods, and attributes in the class. Let's build out our Dog interface and pass in the name of a dog, and have a function named bark: class Dog(DogInterface): def __init__(self, name) -> None: # Save parameters to instance variable self.name = name def bark(self) -> None: # Print {name of dog} is barking! print(self.name, \"is barking!\") We can access the name initialized in the __init__ method with self . When we want to create an object of this class with a name and call the method, bark() , it can access the name given and print out the statement. Remember, this is an example. You can initialize more variables within any of the class methods and access it through self !","title":"Saving a Instance Variable and Calling the Variable"},{"location":"resources/python-basics/#creating-an-interface","text":"Python does not have a keyword for interfaces. An interface is an abstract class that defines methods which are not implemented. An interface is implemented in the same way as a class, however, an interface will have abstract methods so you will see the keyword pass in those methods. That means that any subclass will construct those methods how it wants to use them. So two different classes which inherit from the same intergace will inherit the same functions, but can have different implementations. Here is an example of a simple interface: class DogInterface: def __init__(self, name) -> None: # Save parameters to class variables pass def bark(self) -> None: # Print {name of dog} is barking! pass","title":"Creating an Interface"},{"location":"resources/python-basics/#inheritance","text":"Inheritance allows us to define a class that can inherit methods and properties of another existing class or interface. Let us use the example DogInterface from above. Let's create a Dog class that inherits DogInterface: class Dog(DogInterface): def __init__(self, name): # Save parameters to instance variable self.name = name def bark(self): # Print {name of dog} is barking! print(self.name, \"is barking!\") Since Dog is inheriting DogInterface , we implement the methods according to how we want both methods to work. To inherit from another class would have the same initialization, but the child class can have different methods. Let's write a Dog class inheriting the class Animal that was mentioned in the Creating a Class section: class Dog(Animal): def __init__(self, name): self.name = name Since Dog is inheriting Animal , we can use the method eat() on all Dog objects. snoopy = Dog(\"Snoopy\") snoopy.eat() # this will print: \"Snoopy is eating.\"","title":"Inheritance"},{"location":"resources/python-basics/#reading-from-command-line-using-sys","text":"There are a few ways to read arguments from the command line, but we will go over using sys . In this module, there is a variable, sys.argv , which is a list. Some things to note: since sys.argv is a list, we can get the length of arguments with len() sys.argv[0] will be the name of the file given All arguments are strings ! Example Command: python3 read_cmd_line.py apple banana Code: \"\"\" Read arguments from command line using sys.argv \"\"\" import sys print(\"Name of the program using sys.argv[0]: \", sys.argv[0]) print(\"Length of arguments given including program name: \", len(sys.argv)) print(\"Argument list: \", sys.argv) print(\"Argument list type: \", type(sys.argv)) print(\"Give the first argument (after program name): \", sys.argv[1]) Output:","title":"Reading from Command Line Using sys"},{"location":"resources/react-basics/","text":"React Basics React is a popular JavaScript library for building user interfaces. Developed by Facebook, it allows developers to create reusable UI components and manage application state efficiently. Key Features Component-Based Architecture : Build reusable, isolated pieces of UI. Virtual DOM : Efficiently updates the DOM by calculating differences between updates. Unidirectional Data Flow : Simplifies data management by ensuring data flows in one direction. JSX Syntax : Combines JavaScript with HTML-like syntax for building UI components. Core Concepts 1. Components Components are the building blocks of a React application. They can be: - Functional Components (Recommended) : Defined as JavaScript functions. - Class Components : Defined as ES6 classes. Example of a Functional Component: function Greeting() { return <h1>Hello, React!</h1>; } export default Greeting; 2. JSX JSX (JavaScript XML) allows you to write HTML-like syntax in JavaScript. It is typically the return of the functional component. Example: function foo(): JSX.Element { // The return type for custom React components is typically JSX const element = <h1>Welcome to React!</h1>; return element; } It is possible to inject Javascript/dynamic content into JSX using {} as a wrapper. NOTE: If/Else statements are not usable in the JSX section, instead use a ternary operator ( bool ? true : false) or use a callback function to render what you need. Examples: // Working example import React from 'react'; export default function Counter(props: { count }) { return ( <div> {/* Inlined javascript variable count (and comment) */} {props.count > 10 ? <p>Count: {count}</p> : <p>Max count (10) reached!<p/>} <button onClick={() => setCount(count + 1)}>Increment</button> {/* Callback function that adds to the count */} </div> ); } See more at the react docs . 3. Props Props (short for properties), are used to pass data from parent to child components. Props are objects that can contain any data you need to pass down. Example: function Welcome(props) { return <h1>Hello, {props.name}!</h1>; } export default Welcome; 4. State State is used to manage dynamic data within a component. Example: import React, { useState } from 'react'; function Counter() { const [count, setCount] = useState(0); return ( <div> <p>Count: {count}</p> <button onClick={() => setCount(count + 1)}>Increment</button> </div> ); } export default Counter; 5. Component Components follow a lifecycle to manage behavior at various stages, mainly the mounting, updating, and unmounting phases. Key stages: * componentDidMount * componentDidUpdate * componentWillUnmount Example: class App extends React.Component { componentDidMount() { console.log('Component Mounted'); } render() { return <h1>React Lifecycle</h1>; } } This is now managed via functional components and the use of states and hooks, but understanding the lifecycle is helpful to resolve bad rendering and understanding rendering logic. Advantages Reusable Components: Break UI into reusable and modular pieces. Efficient Rendering: The Virtual DOM minimizes updates to the actual DOM. Strong Ecosystem: Includes tools like React Router and state management libraries like Redux. Basic Project Structure src : Contains application code. public : Static assets like images or HTML. Example Application import React from 'react'; function App() { const name = 'React'; return ( <div> <h1>Welcome to {name}!</h1> </div> ); } export default App; Run the application: npm start Use Cases Single Page Applications (SPAs): Build interactive and dynamic web apps. Reusable Components: Shareable components for UI consistency. Interactive UIs: Handle user input and update views in real-time. Mobile Development: Extend with React Native for mobile apps. Additional Resources React docs Writing HTML with JSX React hooks","title":"React Basics"},{"location":"resources/react-basics/#react-basics","text":"React is a popular JavaScript library for building user interfaces. Developed by Facebook, it allows developers to create reusable UI components and manage application state efficiently.","title":"React Basics"},{"location":"resources/react-basics/#key-features","text":"Component-Based Architecture : Build reusable, isolated pieces of UI. Virtual DOM : Efficiently updates the DOM by calculating differences between updates. Unidirectional Data Flow : Simplifies data management by ensuring data flows in one direction. JSX Syntax : Combines JavaScript with HTML-like syntax for building UI components.","title":"Key Features"},{"location":"resources/react-basics/#core-concepts","text":"","title":"Core Concepts"},{"location":"resources/react-basics/#1-components","text":"Components are the building blocks of a React application. They can be: - Functional Components (Recommended) : Defined as JavaScript functions. - Class Components : Defined as ES6 classes. Example of a Functional Component: function Greeting() { return <h1>Hello, React!</h1>; } export default Greeting;","title":"1. Components"},{"location":"resources/react-basics/#2-jsx","text":"JSX (JavaScript XML) allows you to write HTML-like syntax in JavaScript. It is typically the return of the functional component. Example: function foo(): JSX.Element { // The return type for custom React components is typically JSX const element = <h1>Welcome to React!</h1>; return element; } It is possible to inject Javascript/dynamic content into JSX using {} as a wrapper. NOTE: If/Else statements are not usable in the JSX section, instead use a ternary operator ( bool ? true : false) or use a callback function to render what you need. Examples: // Working example import React from 'react'; export default function Counter(props: { count }) { return ( <div> {/* Inlined javascript variable count (and comment) */} {props.count > 10 ? <p>Count: {count}</p> : <p>Max count (10) reached!<p/>} <button onClick={() => setCount(count + 1)}>Increment</button> {/* Callback function that adds to the count */} </div> ); } See more at the react docs .","title":"2. JSX"},{"location":"resources/react-basics/#3-props","text":"Props (short for properties), are used to pass data from parent to child components. Props are objects that can contain any data you need to pass down. Example: function Welcome(props) { return <h1>Hello, {props.name}!</h1>; } export default Welcome;","title":"3. Props"},{"location":"resources/react-basics/#4-state","text":"State is used to manage dynamic data within a component. Example: import React, { useState } from 'react'; function Counter() { const [count, setCount] = useState(0); return ( <div> <p>Count: {count}</p> <button onClick={() => setCount(count + 1)}>Increment</button> </div> ); } export default Counter;","title":"4. State"},{"location":"resources/react-basics/#5-component","text":"Components follow a lifecycle to manage behavior at various stages, mainly the mounting, updating, and unmounting phases. Key stages: * componentDidMount * componentDidUpdate * componentWillUnmount Example: class App extends React.Component { componentDidMount() { console.log('Component Mounted'); } render() { return <h1>React Lifecycle</h1>; } } This is now managed via functional components and the use of states and hooks, but understanding the lifecycle is helpful to resolve bad rendering and understanding rendering logic.","title":"5. Component"},{"location":"resources/react-basics/#advantages","text":"Reusable Components: Break UI into reusable and modular pieces. Efficient Rendering: The Virtual DOM minimizes updates to the actual DOM. Strong Ecosystem: Includes tools like React Router and state management libraries like Redux.","title":"Advantages"},{"location":"resources/react-basics/#basic-project-structure","text":"src : Contains application code. public : Static assets like images or HTML.","title":"Basic Project Structure"},{"location":"resources/react-basics/#example-application","text":"import React from 'react'; function App() { const name = 'React'; return ( <div> <h1>Welcome to {name}!</h1> </div> ); } export default App; Run the application: npm start","title":"Example Application"},{"location":"resources/react-basics/#use-cases","text":"Single Page Applications (SPAs): Build interactive and dynamic web apps. Reusable Components: Shareable components for UI consistency. Interactive UIs: Handle user input and update views in real-time. Mobile Development: Extend with React Native for mobile apps.","title":"Use Cases"},{"location":"resources/react-basics/#additional-resources","text":"React docs Writing HTML with JSX React hooks","title":"Additional Resources"},{"location":"resources/redis-basics/","text":"Redis Basics Redis (Remote Dictionary Server) is an open-source, in-memory key-value store widely used for caching, real-time analytics, message brokering, and more. It is designed for high performance and flexibility with support for various data structures. Key Features In-Memory Storage : All data resides in memory for fast read/write operations. Data Persistence : Supports saving data to disk using snapshots or append-only files. Rich Data Structures : Offers multiple data types like strings, hashes, lists, sets, and sorted sets. Pub/Sub Messaging : Enables message broadcasting and subscribing for real-time applications. Replication and Clustering : Supports master-slave replication and horizontal scaling with clustering. Core Concepts 1. Key-Value Store Redis stores all data as key-value pairs. Example: SET mykey \"Hello, Redis!\" GET mykey 2. Data Types Strings : Basic key-value storage. SET name \"Redis\" GET name Lists : Ordered collections of strings. LPUSH mylist \"item1\" LPUSH mylist \"item2\" LRANGE mylist 0 -1 Hashes : Key-value pairs within a key. HSET user name \"Alice\" HSET user age 25 HGETALL user Sets : Unordered collections of unique items. SADD myset \"item1\" SADD myset \"item2\" SMEMBERS myset Sorted Sets : Items ordered by scores. ZADD leaderboard 100 \"Alice\" ZADD leaderboard 200 \"Bob\" ZRANGE leaderboard 0 -1 WITHSCORES 3. Persistence Redis provides two persistence mechanisms: * RDB Snapshots: Periodic snapshots of the dataset. * AOF (Append-Only File): Logs every write operation for durability. 4. Pub/Sub Allows message broadcasting to subscribers. SUBSCRIBE channel PUBLISH channel \"Hello, Subscribers!\" Advantages Extremely fast with low latency. Simple and flexible API. Rich ecosystem with many client libraries. Built-in support for high availability. Basic Commands Run the Redis CLI: redis-cli Try basic operations: SET key \"value\" GET key Use Cases Caching: Store frequently accessed data for performance optimization. Session Management: Manage user sessions in web applications. Leaderboards: Use sorted sets to track scores. Real-Time Analytics: Process and analyze data streams in real-time. Message Queues: Use lists or pub/sub for task queues and messaging.","title":"Redis Basics"},{"location":"resources/redis-basics/#redis-basics","text":"Redis (Remote Dictionary Server) is an open-source, in-memory key-value store widely used for caching, real-time analytics, message brokering, and more. It is designed for high performance and flexibility with support for various data structures.","title":"Redis Basics"},{"location":"resources/redis-basics/#key-features","text":"In-Memory Storage : All data resides in memory for fast read/write operations. Data Persistence : Supports saving data to disk using snapshots or append-only files. Rich Data Structures : Offers multiple data types like strings, hashes, lists, sets, and sorted sets. Pub/Sub Messaging : Enables message broadcasting and subscribing for real-time applications. Replication and Clustering : Supports master-slave replication and horizontal scaling with clustering.","title":"Key Features"},{"location":"resources/redis-basics/#core-concepts","text":"","title":"Core Concepts"},{"location":"resources/redis-basics/#1-key-value-store","text":"Redis stores all data as key-value pairs. Example: SET mykey \"Hello, Redis!\" GET mykey","title":"1. Key-Value Store"},{"location":"resources/redis-basics/#2-data-types","text":"Strings : Basic key-value storage. SET name \"Redis\" GET name Lists : Ordered collections of strings. LPUSH mylist \"item1\" LPUSH mylist \"item2\" LRANGE mylist 0 -1 Hashes : Key-value pairs within a key. HSET user name \"Alice\" HSET user age 25 HGETALL user Sets : Unordered collections of unique items. SADD myset \"item1\" SADD myset \"item2\" SMEMBERS myset Sorted Sets : Items ordered by scores. ZADD leaderboard 100 \"Alice\" ZADD leaderboard 200 \"Bob\" ZRANGE leaderboard 0 -1 WITHSCORES","title":"2. Data Types"},{"location":"resources/redis-basics/#3-persistence","text":"Redis provides two persistence mechanisms: * RDB Snapshots: Periodic snapshots of the dataset. * AOF (Append-Only File): Logs every write operation for durability.","title":"3. Persistence"},{"location":"resources/redis-basics/#4-pubsub","text":"Allows message broadcasting to subscribers. SUBSCRIBE channel PUBLISH channel \"Hello, Subscribers!\"","title":"4. Pub/Sub"},{"location":"resources/redis-basics/#advantages","text":"Extremely fast with low latency. Simple and flexible API. Rich ecosystem with many client libraries. Built-in support for high availability.","title":"Advantages"},{"location":"resources/redis-basics/#basic-commands","text":"Run the Redis CLI: redis-cli Try basic operations: SET key \"value\" GET key","title":"Basic Commands"},{"location":"resources/redis-basics/#use-cases","text":"Caching: Store frequently accessed data for performance optimization. Session Management: Manage user sessions in web applications. Leaderboards: Use sorted sets to track scores. Real-Time Analytics: Process and analyze data streams in real-time. Message Queues: Use lists or pub/sub for task queues and messaging.","title":"Use Cases"}]}